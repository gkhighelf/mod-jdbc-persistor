/*
 * Copyright 2012-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var container  = require( "container" ) ;
var vertx      = require( "vertx" ) ;
var vertxTests = require( "vertx_tests" ) ;
var vassert    = require( "vertx_assert" ) ;

var eb = vertx.eventBus;

var script = this ;
var persistorConfig = { address: 'test.persistor', url: 'jdbc:hsqldb:mem:testdb?shutdown=true' }
java.lang.System.out.println( persistorConfig.url ) ;
var readyAddress = persistorConfig.address + '.ready'

var readyHandler = function( msg ) {
  if( msg.status === 'ok' ) {
    eb.unregisterHandler( readyAddress, readyHandler ) ;
    vertxTests.startTests( script ) ;
  }
} ;

// This will get called by the jdbc-persistor when it has installed the work-queue
eb.registerHandler( readyAddress, readyHandler ) ;

container.deployModule( java.lang.System.getProperty( 'vertx.modulename' ), persistorConfig, 1, function(err, deployID) {
  if (err != null) {
    err.printStackTrace();
  }
} ) ;

function checkStatus() {
  eb.send( 'test.persistor', {
    action: 'pool-status'
  }, function( reply ) {
    vassert.assertEquals( reply.status, 'ok' ) ;
    vassert.assertEquals( reply.connections, reply.idle, 0 ) ;
    vassert.assertEquals( reply.orphans, 0, 0 ) ;
    vassert.testComplete() ;
  } ) ;
}

function test_InvalidAction() {
  eb.send( 'test.persistor', {
    action: 'blahblahblah'
  }, function( reply ) {
    vassert.assertEquals( reply.status, 'error' ) ;
    checkStatus() ;
  } )
}

function initTable( handler ) {
  eb.send( 'test.persistor', {
    action: 'execute',
    stmt:   'CREATE TABLE IF NOT EXISTS test ( id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL, name VARCHAR(80), age INTEGER, CONSTRAINT testid PRIMARY KEY ( id ) )'
  }, function( reply ) {
    eb.send( 'test.persistor', {
      action: 'execute',
      stmt:   'TRUNCATE TABLE test'
    }, function( reply ) {
      handler( reply ) ;
    } ) ;
  } ) ;
}

function initTableWithTimestamp( handler ) {
  eb.send( 'test.persistor', {
    action: 'execute',
    stmt:   'CREATE TABLE IF NOT EXISTS testtime ( id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL, time TIMESTAMP, CONSTRAINT testtimeid PRIMARY KEY ( id ) )'
  }, function( reply ) {
    eb.send( 'test.persistor', {
      action: 'execute',
      stmt:   'TRUNCATE TABLE testtime'
    }, function( reply ) {
      handler( reply ) ;
    } ) ;
  } ) ;
}

function testConcurrency() {
  var todo = 10 ;
  var done = 0 ;

  eb.send( 'test.persistor', {
    action: 'execute',
    stmt: "CREATE FUNCTION sleep(seconds INTEGER, num INTEGER) RETURNS INTEGER " +
          "LANGUAGE JAVA DETERMINISTIC NO SQL EXTERNAL NAME " +
          "'CLASSPATH:com.bloidonia.vertx.mods.integration.javascript.JavaScriptIntegrationTests.sleep'"
  }, function( reply ) {
    vassert.assertEquals( reply.status, 'ok' ) ;
    var start = new Date() ;
    for( var i = 0 ; i < todo ; i++ ) {
      eb.send( 'test.persistor', {
        action: 'select',
        stmt:   'CALL sleep( 1, ' + ( i + 1 ) + ' )'
      }, function( reply ) {
        vassert.assertEquals( reply.status, 'ok' ) ;
        done++ ;
        java.lang.System.out.println( "Done " + done + " (task " + reply.result[0][ '@p0' ] + " returned ok)" ) ;
        if( done == todo ) {
          var diff = new Date().getTime() - start.getTime() ;
          vassert.assertTrue( diff < 5000 ) ;
          checkStatus() ;
        }
      } ) ;
    }
  } )
}


function testSimpleSelect() {
  eb.send( 'test.persistor', {
    action: 'select',
    stmt:   'SELECT * FROM INFORMATION_SCHEMA.SYSTEM_USERS'
  }, function( reply ) {
    vassert.assertEquals( reply.status, 'ok' ) ;
    vassert.assertNotSame( reply.result, undefined ) ;
    checkStatus() ;
  } )
}

function testBatchedSimpleSelector() {
  var num = 23;

  var received = 0;

  function createReplyHandler() {
    return function( reply, replier ) {
      received += reply.result.length ;
      if( reply.status === 'more-exist' ) {
        replier( {}, createReplyHandler() ) ;
      } else {
        vassert.assertEquals( reply.status, 'ok' ) ;
        vassert.assertEquals( received, num, 0 ) ;
        checkStatus() ;
      }
    }
  }

  initTable( function() {
    // Add some people
    var values = []
    for( var i = 0 ; i < num ; i++ ) {
      values.push( [ 'tim', i ] ) ;
    }
    eb.send('test.persistor', {
      action: 'insert',
      stmt:  'INSERT INTO test ( name, age ) VALUES ( ?, ? )',
      values: values
    }, function( reply ) {
      vassert.assertEquals( reply.status, 'ok' ) ;
      vassert.assertEquals( reply.updated, num, 0 ) ;
      vassert.assertEquals( reply.result.length, num, 0 ) ;
      eb.send('test.persistor', {
        action: 'select',
        stmt:   'SELECT * FROM test ORDER BY age ASC',
        batchsize: 10
      }, createReplyHandler() ) ;
    });
  } ) ;
}

function testTimestamp() {
  initTableWithTimestamp( function() {
    eb.send( 'test.persistor', {
      action: 'insert',
      stmt:  'INSERT INTO testtime( time ) VALUES ( ? )',
      values: [ [ '2013-02-14 12:30:44' ],
                [ '2013-02-15 12:00:00' ],
                [ '2013-02-16 11:00:00' ] ]
    }, function( reply ) {
      vassert.assertEquals( reply.status, 'ok' ) ;
      vassert.assertNotSame( reply.result, undefined ) ;
      vassert.assertEquals( reply.result.length, 3, 0 ) ;
      vassert.assertEquals( reply.result[ 0 ].ID, 1, 0 ) ;
      vassert.assertEquals( reply.result[ 1 ].ID, 2, 0 ) ;
      vassert.assertEquals( reply.result[ 2 ].ID, 3, 0 ) ;
      eb.send( 'test.persistor', {
        action: 'select',
        stmt:   "SELECT id, TO_CHAR( time, 'YYYY-MM-DD HH24:MI:SS' ) AS TIME FROM testtime ORDER BY ID ASC"
      }, function( reply ) {
        vassert.assertEquals( reply.status, 'ok' ) ;
        vassert.assertEquals( reply.result.length, 3, 0 ) ;

        vassert.assertEquals( reply.result[ 0 ].TIME, '2013-02-14 12:30:44' ) ;
        vassert.assertEquals( reply.result[ 1 ].TIME, '2013-02-15 12:00:00' ) ;
        vassert.assertEquals( reply.result[ 2 ].TIME, '2013-02-16 11:00:00' ) ;

        checkStatus() ;
      } ) ;
    } ) ;
  } )
}

function testCreateAndInsert() {
  initTable( function() {
    eb.send( 'test.persistor', {
      action: 'insert',
      stmt:  'INSERT INTO test( name, age ) VALUES ( ?, ? )',
      values: [ [ 'tim', 65 ], [ 'dave', 29 ], [ 'mike', 42 ] ]
    }, function( reply ) {
      vassert.assertEquals( reply.status, 'ok' ) ;
      vassert.assertNotSame( reply.result, undefined ) ;
      vassert.assertEquals( reply.result.length, 3, 0 ) ;
      eb.send( 'test.persistor', {
        action: 'select',
        stmt:   'SELECT * FROM test ORDER BY age ASC'
      }, function( reply ) {
        vassert.assertEquals( reply.status, 'ok' ) ;
        vassert.assertEquals( reply.result.length, 3, 0 ) ;
        vassert.assertEquals( reply.result[ 0 ].NAME, 'dave' ) ;
        vassert.assertEquals( reply.result[ 0 ].AGE, 29, 0 ) ;

        vassert.assertEquals( reply.result[ 1 ].NAME, 'mike' ) ;
        vassert.assertEquals( reply.result[ 1 ].AGE, 42, 0 ) ;

        vassert.assertEquals( reply.result[ 2 ].NAME, 'tim' ) ;
        vassert.assertEquals( reply.result[ 2 ].AGE, 65, 0 ) ;

        checkStatus() ;
      } ) ;
    } ) ;
  } )
}

function testCreateAndInsertViaStmt() {
  initTable( function() {
    eb.send( 'test.persistor', {
      action: 'insert',
      stmt:  "INSERT INTO test( name, age ) VALUES ( 'tim', 65 ), ( 'dave', 29 ), ( 'mike', 42 )",
    }, function( reply ) {
      vassert.assertEquals( reply.status, 'ok' ) ;
      vassert.assertNotSame( reply.result, undefined ) ;
      vassert.assertEquals( reply.result.length, 3, 0 ) ;
      eb.send( 'test.persistor', {
        action: 'select',
        stmt:   'SELECT * FROM test ORDER BY age ASC'
      }, function( reply ) {
        vassert.assertEquals( reply.status, 'ok' ) ;
        vassert.assertEquals( reply.result.length, 3, 0 ) ;

        vassert.assertEquals( reply.result[ 0 ].NAME, 'dave' ) ;
        vassert.assertEquals( reply.result[ 0 ].AGE, 29, 0 ) ;

        vassert.assertEquals( reply.result[ 1 ].NAME, 'mike' ) ;
        vassert.assertEquals( reply.result[ 1 ].AGE, 42, 0 ) ;

        vassert.assertEquals( reply.result[ 2 ].NAME, 'tim' ) ;
        vassert.assertEquals( reply.result[ 2 ].AGE, 65, 0 ) ;

        checkStatus() ;
      } ) ;
    } ) ;
  } )
}

function testHammerInsert() {
  initTable( function() {
    var valueList = []
    var hammerSize = 2000
    for( i = 0 ; i < hammerSize ; i++ ) {
      valueList.push( [ i ] )
    }
    eb.send( 'test.persistor', {
      action: 'insert',
      stmt:  "INSERT INTO test( age ) VALUES ( ? )",
      values: valueList
    }, function( reply ) {
      vassert.assertEquals( reply.status, 'ok' ) ;
      vassert.assertNotSame( reply.result, undefined ) ;
      vassert.assertEquals( reply.result.length, hammerSize, 0 ) ;
      eb.send( 'test.persistor', {
        action: 'select',
        stmt:   'SELECT COUNT( * ) AS CNT FROM test'
      }, function( reply ) {
        vassert.assertEquals( reply.status, 'ok' ) ;
        vassert.assertEquals( reply.result[ 0 ].CNT, hammerSize, 0 ) ;
        checkStatus() ;
      } ) ;
    } ) ;
  } )
}

function testHammerParallel() {
  var valueList = [] ;
  var hammerSize = 200 ;
  var loops = 10 ;
  var received = 0 ;
  for( i = 0 ; i < hammerSize ; i++ ) {
    valueList.push( [ i ] )
  }
  initTable( function() {
    for( i = 0 ; i < loops ; i++ ) {
      eb.send( 'test.persistor', {
        action: 'insert',
        stmt:  "INSERT INTO test( age ) VALUES ( ? )",
        values: valueList
      }, function( reply ) {
        vassert.assertEquals( reply.status, 'ok' ) ;
        vassert.assertNotSame( reply.result, undefined ) ;
        vassert.assertEquals( reply.result.length, hammerSize, 0 ) ;
        received++ ;
        if( received === loops ) {
          eb.send( 'test.persistor', {
            action: 'select',
            stmt:   'SELECT COUNT( * ) AS CNT FROM test'
          }, function( reply ) {
            vassert.assertEquals( reply.status, 'ok' ) ;
            vassert.assertEquals( reply.result[ 0 ].CNT, hammerSize * loops, 0 ) ;
            checkStatus() ;
          } ) ;
        }
      } ) ;
    }
  } )
}

function testRollback() {
  initTable( function() {
    eb.send( 'test.persistor', {
      action: 'transaction'
    }, function( reply, replier ) {
      vassert.assertEquals( reply.status, 'ok' ) ;
      vassert.assertEquals( reply.result, undefined ) ;
      replier( {
        action: 'insert',
        stmt:  'INSERT INTO test( name, age ) VALUES ( ?, ? )',
        values: [ [ 'tim', 65 ], [ 'dave', 29 ], [ 'mike', 42 ] ]
      }, function( reply, replier ) {
        vassert.assertEquals( reply.status, 'ok' ) ;
        vassert.assertEquals( reply.result.length, 3, 0 ) ;
        replier( {
          action:'rollback'
        }, function( reply ) {
          vassert.assertEquals( reply.status, 'ok' ) ;
          eb.send( 'test.persistor', {
            action: 'select',
            stmt:   'SELECT * FROM test ORDER BY age ASC'
          }, function( reply ) {
            vassert.assertEquals( reply.status, 'ok' ) ;
            vassert.assertEquals( reply.result.length, 0, 0 ) ;
            checkStatus() ;
          } ) ;
        } ) ;
      } ) ;
    } ) ;
  } ) ;
}

function testCommit() {
  initTable( function() {
    eb.send( 'test.persistor', {
      action: 'transaction'
    }, function( reply, replier ) {
      vassert.assertEquals( reply.status, 'ok' ) ;
      vassert.assertEquals( reply.result, undefined ) ;
      replier( {
        action: 'insert',
        stmt:  'INSERT INTO test( name, age ) VALUES ( ?, ? )',
        values: [ [ 'tim', 65 ], [ 'dave', 29 ], [ 'mike', 42 ] ]
      }, function( reply, replier ) {
        vassert.assertEquals( reply.status, 'ok' ) ;
        vassert.assertEquals( reply.result.length, 3, 0 ) ;
        replier( {
          action:'commit'
        }, function( reply ) {
          vassert.assertEquals( reply.status, 'ok' ) ;
          eb.send( 'test.persistor', {
            action: 'select',
            stmt:   'SELECT * FROM test ORDER BY age ASC'
          }, function( reply ) {
            vassert.assertEquals( reply.status, 'ok' ) ;
            vassert.assertEquals( reply.result.length, 3, 0 ) ;
            vassert.assertEquals( reply.result[ 0 ].NAME, 'dave' ) ;
            vassert.assertEquals( reply.result[ 1 ].NAME, 'mike' ) ;
            vassert.assertEquals( reply.result[ 2 ].NAME, 'tim' ) ;
            checkStatus() ;
          } ) ;
        } ) ;
      } ) ;
    } ) ;
  } ) ;
}
